# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

union Element = Band | Musician | Producer

type AccessTokens {
    accessToken: String
    errors: [Error]
    expiresIn: Int
    refreshToken: String
    status: String
    tokenType: String
}

type Account {
    accountId: ID!
    createDate: String
    isAdmin: Boolean
    profiles: [Profile]
}

type Award {
    awardCategories: [String]
    awardId: ID!
    description: String
    elementType: ElementType
    name: String
    primaryImage(aspectRatio: String = "1x1", maxWidth: Int = 200): Image
    sourceImageAlbums: [SourceImageAlbum]
}

type Band {
    bandId: ID!
    elementType: ElementType
    musicians: [Musician]
    name: String
    primaryImage(aspectRatio: String = "1x1", maxWidth: Int = 200): Image
    producers: [Producer]
    sourceImageAlbums: [SourceImageAlbum]
}

type Error {
    message: String
    statusCode: String
}

type Event {
    "customer: Customer"
    bands: [Band]
    days: [String]
    description: String
    elementType: ElementType
    eventEnd: String
    eventId: ID!
    eventStart: String
    eventType: String
    musicians: [Musician]
    name: String
    primaryImage(aspectRatio: String = "1x1", maxWidth: Int = 200): Image
    sourceImageAlbums: [SourceImageAlbum]
    timezone: String
}

type GeneralResponse {
    error: String
    message: String
    status: String
    statusCode: String
}

type Image {
    aspectRatio: String
    height: Int
    imageBaseId: String!
    url: String!
    width: Int
}

type Musician {
    bandRoles: [String]
    description: String
    elementType: ElementType
    firstName: String
    lastName: String
    musicianId: ID!
    name: String
    primaryImage(aspectRatio: String = "1x1", maxWidth: Int = 200): Image
    socialMedia: SocialMedia
    "detailImages(aspect: String = \"1x1\", maxWidth: Int = 200): [Image]"
    sourceImageAlbums: [SourceImageAlbum]
    talents: [String]
}

type Mutation {
    loginWithEmailPassword(email: String!, password: String!): AccessTokens
    setCurrentlyPlayingBand(bandId: String!, eventId: String!): RealtimeData
    signupWithEmailPassword(email: String!, password: String!): Account
    voteForElement(voteInput: VoteInput!): Vote
}

type Producer {
    description: String
    elementType: ElementType
    name: String
    primaryImage(aspectRatio: String = "1x1", maxWidth: Int = 200): Image
    producerId: ID!
    sourceImageAlbums: [SourceImageAlbum]
}

type Profile {
    profileId: ID!
    profileType: String
}

type Query {
    "Account"
    getAccountVotesForEvent(eventId: String!): [Vote]
    getAward(awardId: String!, bandId: String!): Award
    getAwardsByEvent(eventId: String!): [Award]
    getBand(bandId: String!, eventId: String!): Band
    getBandsByEvent(eventId: String!): [Band]
    getCurrentEvents: [Event]
    getEvent(eventId: String!): Event
    getMusician(eventId: String!, musicianId: String!): Musician
    getMusiciansByEvent(eventId: String!): [Musician]
    getMusiciansInBand(bandId: String!): [Musician]
    getRealtimeDataByEvent(eventId: String!): [RealtimeData]
    "Stats"
    getVoteSummariesForEvent(eventId: String!): [VoteSummary]
}

type RealtimeData {
    name: String
    value: String
}

type SocialMedia {
    facebook: String
    instagram: String
    twitter: String
    website: String
}

type SourceImage {
    album: String
    aspectRatio: String
    bucket: String
    elementId: String
    elementType: String
    height: Int
    key: String
    url: String!
    width: Int
}

type SourceImageAlbum {
    name: String
    processedImages: [Image]
    sourceImages: [SourceImage]
}

type Vote {
    awardId: String
    element: Element
    elementId: String
    elementType: ElementType
    eventId: String
    voteId: ID!
}

type VoteGroupDetail {
    element: Element
    elementId: String
    elementType: ElementType
    voteCount: Int
}

type VoteSummary {
    award: Award
    awardId: String
    details: [VoteGroupDetail]
    eventId: String
}

enum CacheControlScope {
    PRIVATE
    PUBLIC
}

enum ElementType {
    Award
    Band
    Brew
    Brewery
    Musician
    Producer
}

enum Role {
    ADMIN
    REVIEWER
    UNKNOWN
    USER
}

input VoteInput {
    awardId: String
    elementId: String
    eventId: String
}
